package model.controllers;
import model.exceptions.ClientNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import model.enities.*;
import model.repositories.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/client") // This means URL's start with /client
public class ClientController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ClientRepository clientRepository;

    @PostMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody Client addNewClient (@RequestBody Client newClient) {
        return clientRepository.save(newClient);
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Client> getAllClients() {
        // This returns a JSON or XML with the users
        return clientRepository.findAll();
    }

    @GetMapping(path="/{id}")
    public @ResponseBody Client getSingleClient(@PathVariable Integer id){
        return clientRepository.findById(id).orElseThrow(() -> new ClientNotFoundException(id));
    }

    @PutMapping(path="/edit")
    public @ResponseBody Client updateClient(@RequestBody Client newClient, @RequestParam Integer id){
        return clientRepository.findById(id).map(client -> {
            client.setForename(newClient.getForename());
            client.setSurname(newClient.getSurname());
            client.setPesel(newClient.getPesel());
            client.setStreet(newClient.getStreet());
            client.setPostalCode(newClient.getPostalCode());
            client.setCity(newClient.getCity());
            client.setPhoneNumber(newClient.getPhoneNumber());
            client.setEmailAddress(newClient.getEmailAddress());
            return clientRepository.save(client);
        }).orElseGet(() -> {
            newClient.setId(id);
            return clientRepository.save(newClient);
        });
    }
}
