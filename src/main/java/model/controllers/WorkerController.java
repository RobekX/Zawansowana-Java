package model.controllers;
import model.exceptions.ClientNotFoundException;
import model.exceptions.WorkerNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import model.enities.*;
import model.repositories.*;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/worker") // This means URL's start with /client
public class WorkerController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private WorkerRepository workertRepository;

    @PostMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody Worker addNewWorker (@RequestBody Worker newWorker) {
        return workertRepository.save(newWorker);
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Worker> getAllWorkers() {
        // This returns a JSON or XML with the users
        return workertRepository.findAll();
    }

    @GetMapping(path="/{id}")
    public @ResponseBody Worker getSingleWorker(@PathVariable Integer id){
        return workertRepository.findById(id).orElseThrow(() -> new WorkerNotFoundException(id));
    }

    @PutMapping(path="/edit")
    public @ResponseBody Worker updateWorker(@RequestBody Worker newWorker, @RequestParam Integer id){
        return workertRepository.findById(id).map(worker -> {
            worker.setLogin(newWorker.getLogin());
            worker.setPassword(newWorker.getPassword());
            worker.setForename(newWorker.getForename());
            worker.setSurname(newWorker.getSurname());
            worker.setIsAdmin(newWorker.getIsAdmin());

            return workertRepository.save(worker);
        }).orElseGet(() -> {
            newWorker.setId(id);
            return workertRepository.save(newWorker);
        });
    }
}