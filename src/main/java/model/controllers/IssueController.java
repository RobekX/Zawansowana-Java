package model.controllers;
import model.exceptions.ClientNotFoundException;
import model.exceptions.IssueNotFoundException;
import model.exceptions.WorkerNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import model.enities.*;
import model.repositories.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/issue") // This means URL's start with /issue
public class IssueController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private IssueRepository issueRepository;
    @Autowired
    private ClientRepository clientRepository;
    @Autowired
    private WorkerRepository workerRepository;

    @PostMapping(path="/add")
    public @ResponseBody Issue addNewIssue (@RequestParam Integer clientId, @RequestParam Integer workerId, @RequestBody Issue newIssue) {

        newIssue.setClientId(clientRepository.findById(clientId).orElseThrow(() -> new ClientNotFoundException(clientId)));
        newIssue.setWorkerId(workerRepository.findById(workerId).orElseThrow(() -> new WorkerNotFoundException(workerId)));

        return issueRepository.save(newIssue);
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Issue> getAllIssues() {
        // This returns a JSON or XML with the users
        return issueRepository.findAll();
    }

    @GetMapping(path="/{id}")
    public @ResponseBody Issue getSingleIssue(@PathVariable Integer id){
        return issueRepository.findById(id).orElseThrow(() -> new IssueNotFoundException(id));
    }

    @PutMapping(path="/edit")
    public @ResponseBody Issue updateIssue(@RequestBody Issue newIssue, @RequestParam Integer id){

        return issueRepository.findById(id).map(issue -> {
            issue.setCreatedDate(newIssue.getCreatedDate());
            issue.setIssueMessage(newIssue.getIssueMessage());
            return issueRepository.save(issue);
        }).orElseGet(() -> {
            newIssue.setId(id);
            return issueRepository.save(newIssue);
        });
    }
}